{"version":3,"sources":["webpack:///./src/beinformed/modules/Error/ErrorPage.js","webpack:///./src/beinformed/server.js","webpack:///./src/server.js"],"names":[],"mappings":"4rBAMA,uBAgBmB,8MAiBJ,cAA2B,sCA9BpC,YAqCS,EArCG,eAChB,kBACA,kBACA,cACA,8BAJgB,WAWD,8BAXC,WAYC,8DAeW,gBAU9B,qmBC5BA,QAMiB,QAHX,EAEJ,aAFwB,IAGxB,uDAHwB,WAIrB,4BAAgB,IAAhB,CAAgC,aAAQ,MAK7C,EAAM,EAAkB,eACtB,aACA,aACA,SACA,gBAOA,0BACG,IADH,CAEkB,eACC,gBACJ,YACC,eAOlB,EAAM,EAA2B,aAAd,IAAoB,0DAAQ,yCAErC,EAAK,eAAe,qEAGtB,EAAK,MAAM,sBACX,EAAK,KAAK,sBACV,EAAK,KAAK,sBACV,EAAK,KAAK,sBACV,EAAK,OAAO,sBACZ,EAAK,SAAS,sBACd,EAAK,MAAM,WAKW,0KAEpB,2FAlBS,yGA4BnB,EAAM,EAAsB,WAC1B,IAAM,GAAuB,EAAQ,UAErC,yBACE,KADE,KAIJ,UAAe,UAAU,IACzB,2BAAO,IACR,OAED,EAAM,EAAkB,WACtB,IAAM,GAAc,EACpB,uBACE,KADE,KAIJ,GACD,KAUD,EAAM,EAAS,WAIgB,0DAC7B,cAAQ,MAER,+BAAM,GAAO,EAAQ,cACrB,KAAM,EAEN,KAAM,EAAgB,GAGtB,QAAI,EACJ,KAAI,EAEJ,QACE,IAAM,QACD,OAA+B,UAClC,MACE,CACA,SAIJ,eAAQ,OAGR,UAAM,SAAS,OAEf,WACD,QAfD,CAeS,QACP,GAAO,EACL,SAAS,EACT,iBAAU,EAAI,UAAY,EAC1B,cAAM,EACN,iBAAO,EAAI,OAAS,EAEvB,OAED,IAAM,GAAO,IAEb,kBACE,IADE,WAIJ,WAAM,GAAkB,OAExB,cACD,SAjDD,oCC5GA,GAEO,GAAM,GAAU,WAAD,OACpB,GAAiB,CAAE,WADd","file":"server.bb6f6bb7901f4b5c8b9f.js","sourcesContent":["// @flow\n/* global process */\nimport React from \"react\";\n\nimport { BEINFORMED_PATH } from \"beinformed/constants/Constants\";\n\n/**\n * Render a generic error page\n */\nconst ErrorPage = ({\n  errorMessage,\n  errorResource,\n  errorLine,\n  errorStack\n}: {\n  errorMessage: string,\n  errorResource: string,\n  errorLine: number,\n  errorStack: string\n}) => (\n  <div className=\"application\">\n    <div className=\"errorpage jumbotron\">\n      <p className=\"lead\">\n        Sorry, but the page you are looking for was either not found or does not\n        exist.<br />\n        Try refreshing the page or click on the button below to go back to the\n        Homepage.\n      </p>\n      <p>\n        <em>{errorMessage}</em>\n      </p>\n      {process.env.NODE_ENV !== \"production\" &&\n        errorStack && <pre className=\"debug font-italic\">{errorStack}</pre>}\n      {process.env.NODE_ENV !== \"production\" &&\n        errorResource && (\n          <div className=\"font-weight-bold\">\n            {errorResource}, {errorLine}\n          </div>\n        )}\n      <a href={BEINFORMED_PATH} className=\"btn btn-primary btn-lg mt-4\">\n        Homepage\n      </a>\n    </div>\n  </div>\n);\n\nexport default ErrorPage;\n\n\n\n// WEBPACK FOOTER //\n// ./src/beinformed/modules/Error/ErrorPage.js","// @flow\nimport React from \"react\";\nimport Helmet from \"react-helmet\";\nimport acceptLanguage from \"accept-language\";\nimport { Provider } from \"react-redux\";\nimport { renderToString } from \"react-dom/server\";\n\nimport {\n  createServerStore,\n  getHydratableState\n} from \"beinformed/redux/createStore\";\nimport Href from \"beinformed/models/href/Href\";\nimport ApplicationContainer from \"beinformed/modules/Application/ApplicationContainer\";\nimport ErrorPage from \"beinformed/modules/Error/ErrorPage\";\nimport Locales from \"beinformed/i18n/Locales\";\nimport { locationChange } from \"beinformed/modules/Router/redux/RouterActions\";\nimport { loadServerState } from \"beinformed/modularui/loadState\";\n\n/**\n * Create application\n */\nconst createApplication = (\n  url,\n  store,\n  application = <ApplicationContainer />\n) => renderToString(<Provider store={store}>{application}</Provider>);\n\n/**\n * Create generic error page\n */\nconst createErrorPage = ({\n  message,\n  resource,\n  line,\n  trace\n}: {\n  message: string,\n  resource: string,\n  line: number,\n  trace: string\n}) =>\n  renderToString(\n    <ErrorPage\n      errorMessage={message}\n      errorResource={resource}\n      errorLine={line}\n      errorStack={trace}\n    />\n  );\n\n/**\n * Create page html\n */\nconst createPage = (application, head, state = \"\") => `\n  <!doctype html>\n  <html ${head.htmlAttributes.toString()}>\n    <head>\n      <meta charset=\"utf-8\" />\n      ${head.title.toString()}\n      ${head.base.toString()}\n      ${head.meta.toString()}\n      ${head.link.toString()}\n      ${head.script.toString()}\n      ${head.noscript.toString()}\n      ${head.style.toString()}\n\n      {CSSASSETS:<link rel=\"stylesheet\" type=\"text/css\" href=\"{FILE}\" />:CSSASSETS}\n    </head>\n    <body class=\"nojs\">\n      <div id=\"application\">${application}</div>\n      <script type=\"application/json\" data-app-state=\"app-json\">\n        ${state}\n      </script>\n      {JSASSETS:<script src=\"{FILE}\"></script>:JSASSETS}\n    </body>\n  </html>\n`;\n\n/**\n * Returns the prefered user locale based on the available locales in the applicatio nand the accept-language header of the request.\n */\nconst getPreferredLocale = (request: HttpServletRequestJava): string => {\n  const acceptLanguageHeader = request.getHeader(\"Accept-Language\");\n\n  if (acceptLanguageHeader === null) {\n    return \"en\";\n  }\n\n  acceptLanguage.languages(Locales.getAvailableLocaleCodes());\n  return acceptLanguage.get(acceptLanguageHeader);\n};\n\nconst getQueryString = (request: HttpServletRequestJava): string => {\n  const querystring = request.getQueryString();\n  if (querystring === null) {\n    return \"\";\n  }\n\n  return `?${querystring}`;\n};\n\n/**\n * Initialize Application server side.\n */\ntype serverPropsType = {\n  request: HttpServletRequestJava,\n  application?: any,\n  locales?: typeof Locales\n};\nconst server = ({\n  request,\n  application,\n  locales = Locales\n}: serverPropsType): string => {\n  console.debug(\"Create isomorphic client\"); // eslint-disable-line no-console\n\n  const href = request.getPathInfo() + getQueryString(request);\n  const locale = getPreferredLocale(request);\n\n  const requestedHref = new Href(href);\n\n  // Create initial state based on the requested href. Based on this data, the ui is rendered.\n  let page = null;\n  let store = null;\n\n  try {\n    const preloadedState = {\n      ...loadServerState(requestedHref, locale),\n      i18n: {\n        locale,\n        locales\n      }\n    };\n\n    store = createServerStore(preloadedState);\n\n    // store.dispatch(receiveLocale(locale));\n    store.dispatch(locationChange(requestedHref));\n\n    page = createApplication(href, store, application);\n  } catch (err) {\n    page = createErrorPage({\n      message: err.message,\n      resource: err.fileName || err.resource,\n      line: err.lineNumber,\n      trace: err.stack || err.trace\n    });\n  }\n\n  const head = Helmet.renderStatic();\n\n  if (store === null) {\n    return createPage(page, head);\n  }\n\n  const serializedState = getHydratableState(store);\n\n  return createPage(page, head, serializedState);\n};\n\nexport { server };\n\n\n\n// WEBPACK FOOTER //\n// ./src/beinformed/server.js","// @flow\nimport { server as beinformedServer } from \"beinformed/server\";\n\nexport const server = (request: HttpServletRequestJava) =>\n  beinformedServer({ request });\n\n\n\n// WEBPACK FOOTER //\n// ./src/server.js"],"sourceRoot":""}